use frame_support::{decl_module, decl_storage, ensure, dispatch};
use frame_system::ensure_signed;
use sp_std::vec::Vec;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use reqwest::{Client, Error as ReqwestError};

#[derive(Serialize, Deserialize)]
struct Booking {
    client: String,
    activity: String,
    date: String,
    payment_status: String,
}

#[derive(Serialize, Deserialize)]
struct FareharborItem {
    id: u32,
    name: String,
    description: String,
}

pub trait Trait: frame_system::Trait {}

decl_storage! {
    trait Store for Module<T: Trait> as Activity {
        clients get(fn clients): map hasher(blake2_128_concat) String => Vec<String>;
        activities get(fn activities): map hasher(blake2_128_concat) (String, String) => Vec<String>;
        bookings get(fn bookings): map hasher(blake2_128_concat) (String, String, String) => Option<Booking>;
        available_items get(fn available_items): Vec<FareharborItem>;
    }
}

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        #[weight = 10_000]
        fn fetch_available_items(origin, location: String, date: String, time: String) -> dispatch::DispatchResult {
            let fareharbor_api_key = "your_api_key_here";
            let fareharbor_url = format!("https://fareharbor.com/api/external/v1/{}/items/", location);

            let client = Client::new();
            let res = client
                .get(&fareharbor_url)
                .header("Content-Type", "application/json")
                .header("User-Agent", "Substrate Fareharbor Integration")
                .header("Authorization", format!("Bearer {}", fareharbor_api_key))
                .send()
                .map_err(|_| "Unable to send request to the API")?;

            let json: Value = res
                .json()
                .map_err(|_| "Unable to parse response from the API")?;

            let items = match json["items"].as_array() {
                Some(i) => i,
                None => return Err("No items in response from the API".into()),
            };

            let mut fareharbor_items = Vec::new();

            for item in items {
                let fareharbor_item: FareharborItem = serde_json::from_value(item.clone())
                    .map_err(|_| "Unable to parse Fareharbor item from JSON")?;

                fareharbor_items.push(fareharbor_item);
            }

            AvailableItems::<T>::put(fareharbor_items);
            Ok(())
        }

        #[weight = 10_000]
        fn book_activity(origin, name: String, activity: String, date: String) -> dispatch::DispatchResult {
            let sender = ensure_signed(origin)?;

            ensure!(
                Clients::<T>::contains_key(&name),
                "Client does not exist",
            );

            let activity_list = Activities::<T>::get((&name, &sender));
            ensure!(
                activity_list.contains(&activity),
                "Activity not found for this client",
            );

            let booking = Booking {
                client: name.clone(),
                activity,
                date: date.clone(),
                payment_status: "unpaid".to_string(),
            };

            ensure!(
                !Bookings::<T>::contains_key((&name, &activity,
